/*
Singletons â€“ Each component dependent on a service gets a reference to the 
single instance generated by the service factory
	factory services
 */
angular.module('appraiser')

.factory('services', ['$http','localStorageService','$log','$q','$compile', 
	function($http,localStorageService,log,$q,$compile){

		let services={};

			/**
			 * [get address form google API based on query]
			 * @param  {[type]} query [description]
			 * @return {[type]}       [description]
			 */
			services.getAddress = (query) => {

				if(!query){ return;}

				return $http.get('//maps.googleapis.com/maps/api/geocode/json', {
					params: {
						address: query,
						sensor: false
					},
					cache:true
					}).then(function(response){
						if(!response){ return;}
						return response.data.results.map(function(item){
							return item;
						});
					});
	
			};
			//set session object
			/**
			 * [set object data on local cookies]
			 * @param {object} obj JSON.object
			 */
			
			services.setSession= (obj)=>{
			
				if(!obj){
					log.warn('Provide session object to set for local cookies');
				}
				this.keys='-user';
				let data=window.btoa(JSON.stringify(obj));
				localStorageService.cookie.set(this.keys,data,(obj.remember?30:1));

				return services.getSession();
			};

			services.saveUsername = (str)=>{
			
				if(!str){
					log.warn('Provide session object to set for local cookies');
				}

				this.keys='-username';
				let data=window.btoa(JSON.stringify(str));
				localStorageService.cookie.set(this.keys,data,30);
				
				return services.getSession();
			};

			//get session object if exist
			/**
			 * [getSession get Session data form local]
			 * @return {object} [return json.object user object]
			 */
			
			services.getSession=()=>{
				
				this.keys='-user';

				let data=localStorageService.cookie.get(this.keys);

				if(data){
					let obj=window.atob(data);
					return JSON.parse(obj);
				}

				return false;
				
			};	

			services.getSaveUsername=()=>{
				
				this.keys='-username';

				let data=localStorageService.cookie.get(this.keys);

				if(data){
					let obj=window.atob(data);
					return JSON.parse(obj);
				}

				return false;
				
			};			

			/**
			 * [clear all seesion data]
			 * @return true or false
			 */
			services.removeSession=()=>{
				
				this.keys='-user';

				localStorageService.cookie.remove(this.keys);
				localStorageService.remove(this.keys,"sessionStorage");
				
				localStorageService.clearAll();
				return true;
			};

			services.removeSaveUsername=()=>{
				
				this.keys='-username';

				localStorageService.cookie.remove(this.keys);
				localStorageService.remove(this.keys,"sessionStorage");
				
				localStorageService.clearAll();
				return true;
			};

			/**
			 * [$http request method]
			 * @param  {object} obj [http request object {method:'POST',url:'url'}]
			 * @return {promise}     [return response object]
			 */
			services.http = (obj) => {
				return $q((resolve, reject) => {
					$http(obj)
					.then(response => resolve(response.data))
					.catch(err => reject(err.data));
				});
			};

			/**
			 * [description]
			 * @param  {html template} html  [description]
			 * @param  {scope variable} scope [description]
			 * @return {string  compile with scope}       [description]
			 */
			services.HTMLcompile = (html,scope) => {

				let compiled = $compile(html)(scope);
				
				return compiled[0];				
			};
			/**
			 * [description]
			 * @param  {selctor} id [html element id]
			 * @return {[type]}    [description]
			 */
			services.scrollToTop = (id) =>{
				let offset;
				if(id){
					offset=angular.element(document.querySelector('#'+id)).prop('offsetTop');
				}

				$('html,body').animate({
					scrollTop: offset || 0
				},500);
			};

			services.saveLocal = (key, data) => {
				if(!data){
					return false;
				}
				let str=JSON.stringify(data);
				localStorageService.set(key, window.btoa(str), "sessionStorage");
				let obj=window.atob(localStorageService.get(key,"sessionStorage"));
				return JSON.parse(obj);

			};

			services.getSaveLocal = (key) => {

				if(!key){
					return false;
				}

				let data=localStorageService.get(key,"sessionStorage");

				if(data){
					let obj=window.atob(localStorageService.get(key,"sessionStorage"));
					return JSON.parse(obj);
				}
				else{
					return false;
				}
			};

			services.deleteSavedLocal = (key) => {
				if(!key){
					return false;
				}
				return localStorageService.remove(key,"sessionStorage");
			};


			services.getError = (data) => {
				if(data){
				let obj={};
				obj.type=data.type;

				obj.message = data.errors ? data.errors[0] : data.message;
				
				return obj;
				}
				else{
					return false;
				}
			};

		return services;
	}
]);
