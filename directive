 'use strict';
	
	/*
		Singletons â€“ Each component dependent on a service gets a reference to the 
		single instance generated by the service factory
	*/

angular.module('appraiser')

//ng-md-icon directive 
.directive('iconButton',['$timeout',($timeout) => {
	return {
		restrict: 'E',
		transclude:true,
		scope:{
			icon:'@',
			change:'@',
			class:'@',
			ariaLabel:'@',
			click:'&'
		},
		template:`<md-button class="{{class}}" aria-label="{{ariaLabel}}" ng-click="onClick()">
		<ng-md-icon icon="{{icons}}" ng-if="icon" options="{{options}}"></ng-md-icon>
		<ng-transclude></ng-transclude>
		</md-button>`,
		link: (scope, ele,attr) => {
			//default option 
			scope.options={
				rotation: 'counterclock', 
				duration: 575
			};

			scope.onClick=()=>{
				changeIcon();
				scope.click();	
			};

			scope.icons=scope.icon;
			//change icon on click
			let changeIcon = () => {
				if(scope.change){
				 scope.icons = (scope.icons==scope.icon) ? scope.change : scope.icon;
				
				}
			};

		}
	};

}])

//scroll to top 
.directive('scrollToTop', ['$timeout',  ($timeout) => {
	return {
		template:`
				<md-button 
					scroll-Top  
					ng-click="scrollToTop()" 
					class="md-fab md-mini fadeInUp scrollToTop" 
					aria-label="scrollTop">
					<ng-md-icon icon="keyboard_arrow_up"  style="fill:white">
					</ng-md-icon>
				</md-button>`,
			link: (scope, ele) => {
			
			scope.icons= '';
		
			$(window).scroll(function(){
		
				if ($(window).scrollTop() > 200) {
					$('.scrollToTop').fadeIn();	
					
				} else {
					$('.scrollToTop').fadeOut();
				}
			
			});

			scope.scrollToTop = () => {
				
				$('html,body').animate({
					scrollTop: 0
				}, 650);
			};

		}
	};
}])
//alert template 
/*
	alert={
		message:[your message] , 
		type:'error | suucess'
	}
 */
.directive('alertMessage', ['$timeout', function ($timeout) {
	return {
		restrict: 'E',
		template:`<div class="alert" 
			ng-class="{'alert-error':alert.type=='error','alert-success':alert.type=='success'}"
			layout="row" layout-align="space-between center">
				<div class="msg" ng-bind-html="alert.message"></div>
			<md-button class="md-icon-button" ng-click="close()" aria-label="close">
			<ng-md-icon size="20"  icon="close"></ng-md-icon>
			</md-button>
			</div>`,
		link: function (scope, ele) {

			scope.close = function () {
				delete scope.$parent.$parent.alert;
				delete scope.$parent.alert;
			};
		}
	};
}])

//confirm password 
.directive('passwordVerify', function(){

	return {
		 require: 'ngModel',
		 scope: {
	        passwordVerify: '=',
	        ngModel:'='
	     },
	     link: (scope, element, attrs, ctrl) => {

	     	scope.$watch('ngModel', (val) => {
	     		if(val){
	     			check();
	     		}
	     	});

     		scope.$watch('passwordVerify', (val) => {
     			if(val){
	     			check();
	     		}
	     	});

			let check = () => {
					if(scope.passwordVerify===scope.ngModel){
					ctrl.$setValidity('passwordVerify', true);
					}
					else{
					
						ctrl.$setValidity('passwordVerify', false);
			
					}
			};
		
		}
	};
})
//progress button
//<md-loader ng-if="loading" loading="loading"> Loading..</md-loader>
.directive('mdLoader', [ () => {
    return {
        restrict: 'E',
        transclude:true,
        scope: {
            loading: '='
        },
        template: `<div ng-if="loading" layout="row"       layout-align="center center">
                        <md-progress-circular  md-diameter="20px" md-mode="indeterminate"></md-progress-circular>
                        &nbsp;<small ng-transclude></small>
	               </div>`
    };
}])
//move to next element
.directive('moveNextOnMaxlength', [function(){
		return {
			link: (scope, ele) => {
				
				 ele.on("input", function(e) {
				
				 	if(ele.val().length == ele.attr("maxlength")) {
	                    let $nextElement = ele.next();

	                    if($nextElement.length) {
	                        $nextElement[0].focus();
	                    }
               		}
               		
				 });

				 ele.on('keyup', function(e){
				 	if(e.keyCode==8){
				 		let $prevElement = ele.prev();
				 		 if($prevElement.length) {
	                        $prevElement[0].focus();
	                    }
				 	}
				 });
			}
		};
}])
.directive('fallbackSrc',  () => {
  return {
    link: function postLink(scope, iElement, iAttrs) {
      iElement.bind('error', function() {
        angular.element(this).attr("src", iAttrs.fallbackSrc);
      });
    }
   };
  
});


// .directive('mdImage', ['$timeout',($timeout) => {
// 	return {
// 		template:`<img src="{{imgSrc}}" alt="{{imageAlt}}" >`,
// 		scope:{
// 			src:'=',
// 			alt:'@',
// 			errorSrc:'@'
// 		},
// 		link: (scope, ele) => {

// 			let image =new Image();
// 				image.src= scope.src;

// 		}
// 	};
// }]);

